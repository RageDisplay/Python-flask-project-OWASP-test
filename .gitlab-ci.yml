stages:
  - test
  - build
  - deploy
  - dast

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  KUBE_URL: https://192.168.200.70:6443
  REGISTRY: 192.168.200.35:5000 
  APP_NAME: myapp-test
  DOCKER_IMAGE: $REGISTRY:$CI_COMMIT_SHORT_SHA

# SAST - Статический анализ кода
sast:
  stage: test
  image: 
    name: semgrep/semgrep:latest
    entrypoint: [""]
  script:
    - semgrep --config auto --error --exclude="venv/*" --exclude="static/*" .
  allow_failure: true

# SCA - Анализ зависимостей
dependency-check:
  stage: test
  image: 
    name: owasp/dependency-check:latest
    entrypoint: [""]
  script:
    - dependency-check.sh --scan . --format HTML --out ./reports
  artifacts:
    paths:
      - reports/
  allow_failure: true

# Сканирование контейнеров с Trivy
trivy-scan:
  stage: test
  image: 
    name: aquasec/trivy:latest
    entrypoint: [""]
  script:
    - trivy fs --severity HIGH,CRITICAL .
  allow_failure: true

# Сборка Docker образа
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t $DOCKER_IMAGE .
    - docker push $DOCKER_IMAGE

# Деплой в Kubernetes
deploy:
  stage: deploy
  image: bitnami/kubectl:latest
  script:
    - mkdir -p ~/.kube
    - cp $KUBECONFIG ~/.kube/config  # admin.conf на время
    - kubectl config set-cluster k8s --server="$KUBE_URL" --insecure-skip-tls-verify=true
    - sed "s/FLASKWORK_TAG/$CI_COMMIT_SHORT_SHA/g" app.yaml | kubectl apply -f -
    - kubectl rollout status deployment/$APP_NAME
  environment:
    name: production
    url: https://192.168.200.70 

# DAST - Динамическое тестирование безопасности
dast:
  stage: dast
  image: 
    name: owasp/zap2docker-stable:latest
    entrypoint: [""]
  script:
    - zap-baseline.py -t https://192.168.200.70 -x dast-report.xml
  artifacts:
    paths:
      - dast-report.xml
  allow_failure: true
